package com.github.freelon.aoc2020

import org.junit.jupiter.api.Test
import kotlin.test.assertEquals

class Day20Test {
    @Test
    fun part1() {
        assertEquals(20899048083289L, Day20().partOne(TEST_INPUT))
    }

    @Test
    fun part2() {
        assertEquals(273, Day20().partTwo(TEST_INPUT))
    }

    @Test
    fun `cut off border`() {
        val tile = Tile(
            """Tile 2311:
..###..###
###...#.#.
..#....#..
.#.#.#..##
##...#.###
##.##.###.
####.#...#
#...##..#.
##..#.....
..##.#..#.
"""
        )

        val expected = listOf(
            "##...#.#",
            ".#....#.",
            "#.#.#..#",
            "#...#.##",
            "#.##.###",
            "###.#...",
            "...##..#",
            "#..#...."
        )

        assertEquals(expected, tile.cutOfBorder())
    }

    @Test
    fun `create image is in correct coordinate system`() {
        val input = """Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###
"""
        val tile = Tile(input)

        val image = createImage(mapOf(Point(0, 0) to tile), false, Tile::pixels)
            .also { println(it) }

        assertEquals(input.lines().drop(1).first(), image.first())
    }

    @Test
    fun `order of tiles fits`() {
        val input = """Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.
"""

        val tiles = parse(input)
        val seed = tiles.first()
        val puzzle = puzzle(seed, tiles)

        assertEquals(1951, puzzle[Point(0, 0)]!!.id)
        assertEquals(2729, puzzle[Point(0, -1)]!!.id)

        createImage(puzzle, true, Tile::cutOfBorder).forEach { println(it) }
    }

    @Test
    fun image() {
        val expectedFromWebsite = """#...##.#.. ..###..### #.#.#####.
..#.#..#.# ###...#.#. .#..######
.###....#. ..#....#.. ..#.......
###.##.##. .#.#.#..## ######....
.###.##### ##...#.### ####.#..#.
.##.#....# ##.##.###. .#...#.##.
#...###### ####.#...# #.#####.##
.....#..## #...##..#. ..#.###...
#.####...# ##..#..... ..#.......
#.##...##. ..##.#..#. ..#.###...

#.##...##. ..##.#..#. ..#.###...
##..#.##.. ..#..###.# ##.##....#
##.####... .#.####.#. ..#.###..#
####.#.#.. ...#.##### ###.#..###
.#.####... ...##..##. .######.##
.##..##.#. ....#...## #.#.#.#...
....#..#.# #.#.#.##.# #.###.###.
..#.#..... .#.##.#..# #.###.##..
####.#.... .#..#.##.. .######...
...#.#.#.# ###.##.#.. .##...####

...#.#.#.# ###.##.#.. .##...####
..#.#.###. ..##.##.## #..#.##..#
..####.### ##.#...##. .#.#..#.##
#..#.#..#. ...#.#.#.. .####.###.
.#..####.# #..#.#.#.# ####.###..
.#####..## #####...#. .##....##.
##.##..#.. ..#...#... .####...#.
#.#.###... .##..##... .####.##.#
#...###... ..##...#.. ...#..####
..#.#....# ##.#.#.... ...##....."""

        val mySolution = solvePuzzle(TEST_INPUT)
        val mySolutionImage = createImage(mySolution, true, Tile::pixels)
        assertEquals(
            expectedFromWebsite.lines().reversed().joinToString("\n"),
            mySolutionImage.joinToString("\n")
        )
    }

    @Test
    fun croppedImage() {
        val expectedFromWebsite = """.#.#..#.##...#.##..#####
###....#.#....#..#......
##.##.###.#.#..######...
###.#####...#.#####.#..#
##.#....#.##.####...#.##
...########.#....#####.#
....#..#...##..#.#.###..
.####...#..#.....#......
#..#.##..#..###.#.##....
#.####..#.####.#.#.###..
###.#.#...#.######.#..##
#.####....##..########.#
##..##.#...#...#.#.#.#..
...#..#..#.#.##..###.###
.#.#....#.##.#...###.##.
###.#...#..#.##.######..
.#.#.###.##.##.#..#.##..
.####.###.#...###.#..#.#
..#.#..#..#.#.#.####.###
#..####...#.#.#.###.###.
#####..#####...###....##
#.##..#..#...#..####...#
.#.###..##..##..####.##.
...###...##...#...#..###"""

        val mySolution = solvePuzzle(TEST_INPUT)
        val mySolutionImage = createImage(mySolution, false, Tile::cutOfBorder)

        assertEquals(
            expectedFromWebsite.lines().reversed().joinToString("\n"),
            mySolutionImage.joinToString("\n")
        )
    }

    @Test
    fun `sea monsters are recognized minimal`() {
        val input = listOf(
            "..................#.",
            "#....##....##....###",
            ".#..#..#..#..#..#..."
        )
        val expected = listOf(
            "..................O.",
            "O....OO....OO....OOO",
            ".O..O..O..O..O..O..."
        )

        val (sea, monsterCount) = markSeaMonsters(input)
        assertEquals(expected.joinToString("\n"), sea.joinToString("\n"))
        assertEquals(1, monsterCount)
    }

    @Test
    fun `sea monsters are recognized in partial example`() {
        val input = listOf(
            ".####...#####..#...###..",
            "#####..#..#.#.####..#.#.",
            ".#.#...#.###...#.##.##..",
            "#.#.##.###.#.##.##.#####",
            "..##.###.####..#.####.##",
            "...#.#..##.##...#..#..##",
        )
        val expected = listOf(
            ".####...#####..#...###..",
            "#####..#..#.#.####..#.#.",
            ".#.#...#.###...#.##.O#..",
            "#.O.##.OO#.#.OO.##.OOO##",
            "..#O.#O#.O##O..O.#O##.##",
            "...#.#..##.##...#..#..##",
        )

        val (sea, monsterCount) = markSeaMonsters(input)
        assertEquals(expected.joinToString("\n"), sea.joinToString("\n"))
        assertEquals(1, monsterCount)
    }


    @Test
    fun `sea monsters are recognized example`() {
        val input = """.####...#####..#...###..
#####..#..#.#.####..#.#.
.#.#...#.###...#.##.##..
#.#.##.###.#.##.##.#####
..##.###.####..#.####.##
...#.#..##.##...#..#..##
#.##.#..#.#..#..##.#.#..
.###.##.....#...###.#...
#.####.#.#....##.#..#.#.
##...#..#....#..#...####
..#.##...###..#.#####..#
....#.##.#.#####....#...
..##.##.###.....#.##..#.
#...#...###..####....##.
.#.##...#.##.#.#.###...#
#.###.#..####...##..#...
#.###...#.##...#.######.
.###.###.#######..#####.
..##.#..#..#.#######.###
#.#..##.########..#..##.
#.#####..#.#...##..#....
#....##..#.#########..##
#...#.....#..##...###.##
#..###....##.#...##.##.#
"""
        val expected = """.####...#####..#...###..
#####..#..#.#.####..#.#.
.#.#...#.###...#.##.O#..
#.O.##.OO#.#.OO.##.OOO##
..#O.#O#.O##O..O.#O##.##
...#.#..##.##...#..#..##
#.##.#..#.#..#..##.#.#..
.###.##.....#...###.#...
#.####.#.#....##.#..#.#.
##...#..#....#..#...####
..#.##...###..#.#####..#
....#.##.#.#####....#...
..##.##.###.....#.##..#.
#...#...###..####....##.
.#.##...#.##.#.#.###...#
#.###.#..####...##..#...
#.###...#.##...#.##O###.
.O##.#OO.###OO##..OOO##.
..O#.O..O..O.#O##O##.###
#.#..##.########..#..##.
#.#####..#.#...##..#....
#....##..#.#########..##
#...#.....#..##...###.##
#..###....##.#...##.##.#
"""


        val (sea, monsterCount) = markSeaMonsters(input.lines())
        assertEquals(expected, sea.joinToString("\n"))
        assertEquals(2, monsterCount)
    }
}

const val TEST_INPUT = """
Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...
"""
